import React from 'react';

const CarSpecifications = ({ specifications, brands, models, bodyTypes, engineTypes, transmissionTypes, driveTypes, colors }) => {
  const getBrandName = (brandId) => {
    const brand = brands?.find(b => b.brand_id === parseInt(brandId));
    return brand?.brand_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  const getModelName = (modelId) => {
    const model = models?.find(m => m.model_id === parseInt(modelId));
    return model?.model_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  const getBodyTypeName = (bodyTypeId) => {
    const bodyType = bodyTypes?.find(bt => bt.body_type_id === parseInt(bodyTypeId));
    return bodyType?.body_type_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  const getEngineTypeName = (engineTypeId) => {
    const engineType = engineTypes?.find(et => et.engine_type_id === parseInt(engineTypeId));
    return engineType?.engine_type_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  const getTransmissionName = (transmissionId) => {
    const transmission = transmissionTypes?.find(t => t.transmission_id === parseInt(transmissionId));
    return transmission?.transmission_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  const getDriveTypeName = (driveTypeId) => {
    const driveType = driveTypes?.find(dt => dt.drive_type_id === parseInt(driveTypeId));
    return driveType?.drive_type_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  const getColorName = (colorId) => {
    const color = colors?.find(c => c.color_id === parseInt(colorId));
    return color?.color_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const specifications_groups = [
    {
      title: '–û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï',
      icon: 'üöó',
      items: [
        { label: '–ú–ê–†–ö–ê', value: getBrandName(specifications.brand_id), key: 'brand' },
        { label: '–ú–û–î–ï–õ–¨', value: getModelName(specifications.model_id), key: 'model' },
        { label: '–ì–û–î –í–´–ü–£–°–ö–ê', value: specifications.year, key: 'year' },
        { label: '–ü–†–û–ë–ï–ì', value: specifications.mileage ? `${specifications.mileage.toLocaleString()} –ö–ú` : null, key: 'mileage' },
        { label: '–°–û–°–¢–û–Ø–ù–ò–ï', value: specifications.condition?.toUpperCase(), key: 'condition' }
      ]
    },
    {
      title: '–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò',
      icon: '‚öôÔ∏è',
      items: [
        { label: '–¢–ò–ü –ö–£–ó–û–í–ê', value: getBodyTypeName(specifications.body_type_id), key: 'body_type' },
        { label: '–¢–ò–ü –î–í–ò–ì–ê–¢–ï–õ–Ø', value: getEngineTypeName(specifications.engine_type_id), key: 'engine_type' },
        { label: '–û–ë–™–ï–ú –î–í–ò–ì–ê–¢–ï–õ–Ø', value: specifications.engine_volume ? `${specifications.engine_volume} –õ` : null, key: 'engine_volume' },
        { label: '–ú–û–©–ù–û–°–¢–¨', value: specifications.power_hp ? `${specifications.power_hp} –õ.–°.` : null, key: 'power' },
        { label: '–ö–û–†–û–ë–ö–ê –ü–ï–†–ï–î–ê–ß', value: getTransmissionName(specifications.transmission_id), key: 'transmission' },
        { label: '–ü–†–ò–í–û–î', value: getDriveTypeName(specifications.drive_type_id), key: 'drive_type' }
      ]
    },
    {
      title: '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û',
      icon: 'üìã',
      items: [
        { label: '–¶–í–ï–¢', value: getColorName(specifications.color_id), key: 'color' },
        { label: '–†–ê–°–¢–ê–ú–û–ñ–ï–ù', value: specifications.customs_cleared !== undefined ? (specifications.customs_cleared ? '–î–ê' : '–ù–ï–¢') : null, key: 'customs', boolean: true },
        { label: '–í–û–ó–ú–û–ñ–ï–ù –û–ë–ú–ï–ù', value: specifications.exchange_possible !== undefined ? (specifications.exchange_possible ? '–î–ê' : '–ù–ï–¢') : null, key: 'exchange', boolean: true },
        { label: '–í–û–ó–ú–û–ñ–ï–ù –ö–†–ï–î–ò–¢', value: specifications.credit_available !== undefined ? (specifications.credit_available ? '–î–ê' : '–ù–ï–¢') : null, key: 'credit', boolean: true }
      ]
    }
  ];

  return (
    <div className="bg-black border-4 border-orange-500 p-6 relative">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-8">
        <h3 className="text-2xl md:text-3xl font-black uppercase tracking-wider text-white mb-4">
          <span className="text-orange-500">–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò</span> –ê–í–¢–û–ú–û–ë–ò–õ–Ø
        </h3>
        <div className="w-full h-1 bg-orange-500"></div>
      </div>

      {/* –ì—Ä—É–ø–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
      <div className="space-y-8">
        {specifications_groups.map((group, groupIndex) => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
          const filledItems = group.items.filter(item => item.value && item.value !== '–ù–µ —É–∫–∞–∑–∞–Ω–∞' && item.value !== '–ù–µ —É–∫–∞–∑–∞–Ω');
          
          if (filledItems.length === 0) return null;

          return (
            <div key={groupIndex} className="bg-gray-900 border-2 border-white p-6">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã */}
              <div className="flex items-center gap-3 mb-6">
                <span className="text-2xl">{group.icon}</span>
                <h4 className="text-white font-black text-lg uppercase tracking-wider">
                  {group.title}
                </h4>
                <div className="flex-1 h-1 bg-orange-500 ml-4"></div>
              </div>

              {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Å–µ—Ç–∫–µ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {filledItems.map((item, index) => (
                  <div key={index} className="bg-black border-2 border-gray-600 p-4 relative group hover:border-orange-500 transition-colors duration-300">
                    {/* –ú–µ—Ç–∫–∞ */}
                    <div className="text-gray-400 font-black text-xs uppercase tracking-wider mb-2">
                      {item.label}:
                    </div>
                    
                    {/* –ó–Ω–∞—á–µ–Ω–∏–µ */}
                    <div className={`font-black text-lg uppercase tracking-wide
                      ${item.boolean 
                        ? item.value === '–î–ê' ? 'text-green-400' : 'text-red-400'
                        : 'text-orange-500'
                      }`}
                    >
                      {item.value}
                    </div>

                    {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
                    <div className="absolute top-2 right-2 w-2 h-2 bg-orange-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
      {specifications_groups.every(group => 
        group.items.filter(item => item.value && item.value !== '–ù–µ —É–∫–∞–∑–∞–Ω–∞' && item.value !== '–ù–µ —É–∫–∞–∑–∞–Ω').length === 0
      ) && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üö´</div>
          <h4 className="text-white font-black text-xl uppercase tracking-wider mb-2">
            –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ù–ï –£–ö–ê–ó–ê–ù–´
          </h4>
          <p className="text-gray-400 font-bold uppercase text-sm">
            –î–ê–ù–ù–´–ï –û–¢–°–£–¢–°–¢–í–£–Æ–¢
          </p>
        </div>
      )}

      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className="absolute top-2 left-2 w-6 h-6 border-2 border-orange-500"></div>
      <div className="absolute bottom-2 right-2 w-6 h-6 bg-orange-500"></div>
    </div>
  );
};

export default CarSpecifications;