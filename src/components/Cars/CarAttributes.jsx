import React from 'react';
import { useCars } from '../../hooks/api/useCars';

const CarAttributes = ({ attributes, onChange }) => {
  const { 
    bodyTypes, 
    engineTypes, 
    transmissionTypes, 
    driveTypes, 
    colors 
  } = useCars();

  const handleAttributeChange = (key, value) => {
    onChange({
      ...attributes,
      [key]: value
    });
  };

  // –ì—Ä—É–ø–ø—ã –ø–æ–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  const fieldGroups = [
    {
      title: '–û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò',
      icon: 'üöó',
      fields: [
        {
          key: 'year',
          label: '–ì–û–î –í–´–ü–£–°–ö–ê',
          type: 'number',
          props: { min: 1980, max: new Date().getFullYear() + 1 }
        },
        {
          key: 'mileage',
          label: '–ü–†–û–ë–ï–ì (–ö–ú)',
          type: 'number',
          props: { min: 0 }
        },
        {
          key: 'condition',
          label: '–°–û–°–¢–û–Ø–ù–ò–ï',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –°–û–°–¢–û–Ø–ù–ò–ï' },
            { value: 'new', label: '–ù–û–í–´–ô' },
            { value: 'excellent', label: '–û–¢–õ–ò–ß–ù–û–ï' },
            { value: 'good', label: '–•–û–†–û–®–ï–ï' },
            { value: 'fair', label: '–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï' },
            { value: 'poor', label: '–¢–†–ï–ë–£–ï–¢ –†–ï–ú–û–ù–¢–ê' }
          ]
        }
      ]
    },
    {
      title: '–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï',
      icon: '‚öôÔ∏è',
      fields: [
        {
          key: 'body_type_id',
          label: '–¢–ò–ü –ö–£–ó–û–í–ê',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –ö–£–ó–û–í–ê' },
            ...(bodyTypes?.data?.map(type => ({
              value: type.body_type_id,
              label: type.body_type_name.toUpperCase()
            })) || [])
          ]
        },
        {
          key: 'engine_type_id',
          label: '–¢–ò–ü –î–í–ò–ì–ê–¢–ï–õ–Ø',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –î–í–ò–ì–ê–¢–ï–õ–Ø' },
            ...(engineTypes?.data?.map(type => ({
              value: type.engine_type_id,
              label: type.engine_type_name.toUpperCase()
            })) || [])
          ]
        },
        {
          key: 'engine_volume',
          label: '–û–ë–™–ï–ú –î–í–ò–ì–ê–¢–ï–õ–Ø (–õ)',
          type: 'number',
          props: { step: 0.1, min: 0, max: 10 }
        },
        {
          key: 'power_hp',
          label: '–ú–û–©–ù–û–°–¢–¨ (–õ.–°.)',
          type: 'number',
          props: { min: 0 }
        },
        {
          key: 'transmission_id',
          label: '–ö–û–†–û–ë–ö–ê –ü–ï–†–ï–î–ê–ß',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –ö–ü–ü' },
            ...(transmissionTypes?.data?.map(type => ({
              value: type.transmission_id,
              label: type.transmission_name.toUpperCase()
            })) || [])
          ]
        },
        {
          key: 'drive_type_id',
          label: '–ü–†–ò–í–û–î',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –ü–†–ò–í–û–î' },
            ...(driveTypes?.data?.map(type => ({
              value: type.drive_type_id,
              label: type.drive_type_name.toUpperCase()
            })) || [])
          ]
        },
        {
          key: 'color_id',
          label: '–¶–í–ï–¢',
          type: 'select',
          options: [
            { value: '', label: '–í–´–ë–ï–†–ò–¢–ï –¶–í–ï–¢' },
            ...(colors?.data?.map(color => ({
              value: color.color_id,
              label: color.color_name.toUpperCase()
            })) || [])
          ]
        }
      ]
    },
    {
      title: '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò',
      icon: 'üìã',
      fields: [
        {
          key: 'customs_cleared',
          label: '–†–ê–°–¢–ê–ú–û–ñ–ï–ù',
          type: 'checkbox'
        },
        {
          key: 'exchange_possible',
          label: '–í–û–ó–ú–û–ñ–ï–ù –û–ë–ú–ï–ù',
          type: 'checkbox'
        },
        {
          key: 'credit_available',
          label: '–í–û–ó–ú–û–ñ–ï–ù –ö–†–ï–î–ò–¢',
          type: 'checkbox'
        }
      ]
    }
  ];

  const renderField = (field) => {
    const value = attributes[field.key] || '';

    switch (field.type) {
      case 'select':
        return (
          <div className="relative group">
            <select
              value={value}
              onChange={(e) => handleAttributeChange(field.key, e.target.value)}
              className="w-full bg-white border-4 border-black px-4 py-4 font-black text-black uppercase tracking-wide
                         focus:outline-none focus:border-orange-500 focus:bg-orange-100
                         hover:bg-gray-100 transition-all duration-300 cursor-pointer appearance-none"
            >
              {field.options.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            
            {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ */}
            <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
              <div className="w-0 h-0 border-l-[8px] border-r-[8px] border-t-[8px] 
                              border-l-transparent border-r-transparent border-t-black"></div>
            </div>
            
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
            <div className="absolute top-2 right-2 w-3 h-3 bg-orange-500 opacity-50 group-hover:opacity-100 transition-opacity"></div>
          </div>
        );

      case 'number':
        return (
          <div className="relative group">
            <input
              type="number"
              value={value}
              onChange={(e) => handleAttributeChange(field.key, e.target.value)}
              className="w-full bg-white border-4 border-black px-4 py-4 font-black text-black uppercase tracking-wide
                         focus:outline-none focus:border-orange-500 focus:bg-orange-100
                         hover:bg-gray-100 transition-all duration-300"
              {...field.props}
            />
            
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
            <div className="absolute top-2 right-2 w-3 h-3 bg-orange-500 opacity-50 group-hover:opacity-100 transition-opacity"></div>
          </div>
        );

      case 'checkbox':
        return (
          <div className="flex items-center gap-4 bg-gray-900 border-2 border-orange-500 p-4 hover:bg-gray-800 transition-colors duration-300">
            <div className="relative">
              <input
                type="checkbox"
                id={field.key}
                checked={value || false}
                onChange={(e) => handleAttributeChange(field.key, e.target.checked)}
                className="sr-only"
              />
              <label
                htmlFor={field.key}
                className={`block w-8 h-8 border-4 cursor-pointer transition-all duration-300 transform hover:scale-110
                  ${value 
                    ? 'bg-orange-500 border-black' 
                    : 'bg-black border-orange-500 hover:bg-gray-800'
                  }`}
              >
                {value && (
                  <div className="flex items-center justify-center w-full h-full">
                    <span className="text-black font-black text-lg">‚úì</span>
                  </div>
                )}
              </label>
            </div>
            <span className="text-white font-black text-sm uppercase tracking-wider flex-1">
              {field.label}
            </span>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="bg-black border-4 border-orange-500 p-6 relative">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-8">
        <h3 className="text-2xl md:text-3xl font-black uppercase tracking-wider text-white mb-4">
          <span className="text-orange-500">–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò</span> –ê–í–¢–û–ú–û–ë–ò–õ–Ø
        </h3>
        <div className="w-full h-1 bg-orange-500"></div>
        <p className="text-gray-300 font-bold text-sm mt-2 uppercase">
          –ó–ê–ü–û–õ–ù–ò–¢–ï –î–ê–ù–ù–´–ï –û –í–ê–®–ï–ú –ê–í–¢–û–ú–û–ë–ò–õ–ï
        </p>
      </div>

      {/* –ì—Ä—É–ø–ø—ã –ø–æ–ª–µ–π */}
      <div className="space-y-10">
        {fieldGroups.map((group, groupIndex) => (
          <div key={groupIndex} className="bg-gray-900 border-2 border-white p-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã */}
            <div className="flex items-center gap-3 mb-8">
              <span className="text-2xl">{group.icon}</span>
              <h4 className="text-white font-black text-lg uppercase tracking-wider">
                {group.title}
              </h4>
              <div className="flex-1 h-1 bg-orange-500 ml-4"></div>
            </div>

            {/* –ü–æ–ª—è –≥—Ä—É–ø–ø—ã */}
            <div className="space-y-6">
              {group.fields.map((field, fieldIndex) => (
                <div key={fieldIndex}>
                  {field.type !== 'checkbox' && (
                    <label className="block text-white font-black text-sm uppercase tracking-wider mb-3">
                      <span className="text-orange-500">‚óè</span> {field.label}
                    </label>
                  )}
                  {renderField(field)}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è */}
      <div className="mt-8 bg-gray-900 border-2 border-orange-500 p-4">
        <div className="flex items-center justify-between mb-2">
          <span className="text-white font-black text-sm uppercase tracking-wider">
            –ü–†–û–ì–†–ï–°–° –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø:
          </span>
          <span className="text-orange-500 font-black text-sm">
            {Math.round((Object.values(attributes).filter(v => v !== '' && v !== null && v !== undefined).length / 
              fieldGroups.reduce((total, group) => total + group.fields.length, 0)) * 100)}%
          </span>
        </div>
        <div className="w-full bg-black border-2 border-gray-600 h-3">
          <div 
            className="h-full bg-orange-500 transition-all duration-500"
            style={{
              width: `${(Object.values(attributes).filter(v => v !== '' && v !== null && v !== undefined).length / 
                fieldGroups.reduce((total, group) => total + group.fields.length, 0)) * 100}%`
            }}
          ></div>
        </div>
      </div>

      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className="absolute top-2 left-2 w-6 h-6 border-2 border-orange-500"></div>
      <div className="absolute bottom-2 right-2 w-6 h-6 bg-orange-500"></div>
    </div>
  );
};

export default CarAttributes;