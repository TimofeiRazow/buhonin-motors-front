import React, { useState } from 'react';
import { usePayments } from '../../hooks/api/usePayments';

const TransactionHistoryPage = () => {
  const [filter, setFilter] = useState('all');
  const { transactions, requestRefund } = usePayments();

  // Mock data –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockTransactions = [
    {
      transaction_id: 1001,
      transaction_type: 'payment',
      amount: 2000,
      currency_code: '‚Ç∏',
      status: 'completed',
      description: 'VIP —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #12345',
      created_date: '2024-08-17T10:30:00Z',
      payment_method: 'card'
    },
    {
      transaction_id: 1002,
      transaction_type: 'payment',
      amount: 1000,
      currency_code: '‚Ç∏',
      status: 'pending',
      description: '–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #12346',
      created_date: '2024-08-17T09:15:00Z',
      payment_method: 'kaspi'
    },
    {
      transaction_id: 1003,
      transaction_type: 'refund',
      amount: 500,
      currency_code: '‚Ç∏',
      status: 'completed',
      description: '–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –ø–æ–¥–Ω—è—Ç–∏–µ –≤ –ø–æ–∏—Å–∫–µ #12344',
      created_date: '2024-08-16T14:20:00Z',
      payment_method: 'card'
    },
    {
      transaction_id: 1004,
      transaction_type: 'bonus',
      amount: 300,
      currency_code: '‚Ç∏',
      status: 'completed',
      description: '–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      created_date: '2024-08-15T16:45:00Z',
      payment_method: 'system'
    },
    {
      transaction_id: 1005,
      transaction_type: 'payment',
      amount: 300,
      currency_code: '‚Ç∏',
      status: 'failed',
      description: '–°—Ä–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ #12343',
      created_date: '2024-08-15T11:10:00Z',
      payment_method: 'qiwi'
    }
  ];

  const getTransactionTypeText = (type) => {
    const types = {
      payment: '–ü–õ–ê–¢–ï–ñ',
      refund: '–í–û–ó–í–†–ê–¢',
      bonus: '–ë–û–ù–£–°',
      withdrawal: '–í–´–í–û–î'
    };
    return types[type] || type.toUpperCase();
  };

  const getTransactionTypeIcon = (type) => {
    const icons = {
      payment: 'üí≥',
      refund: '‚Ü©Ô∏è',
      bonus: 'üéÅ',
      withdrawal: 'üí∞'
    };
    return icons[type] || 'üí≥';
  };

  const getStatusColor = (status) => {
    const colors = {
      completed: 'text-green-500',
      pending: 'text-yellow-500',
      failed: 'text-red-500',
      cancelled: 'text-gray-500'
    };
    return colors[status] || 'text-gray-500';
  };

  const getStatusText = (status) => {
    const statuses = {
      completed: '–ó–ê–í–ï–†–®–ï–ù',
      pending: '–í –û–ë–†–ê–ë–û–¢–ö–ï',
      failed: '–û–®–ò–ë–ö–ê',
      cancelled: '–û–¢–ú–ï–ù–ï–ù'
    };
    return statuses[status] || status.toUpperCase();
  };

  const handleRefundRequest = async (transactionId) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?')) {
      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error('Error requesting refund:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞');
      }
    }
  };

  const filterOptions = [
    { value: 'all', label: '–í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò', icon: 'üìä' },
    { value: 'payment', label: '–ü–õ–ê–¢–ï–ñ–ò', icon: 'üí≥' },
    { value: 'refund', label: '–í–û–ó–í–†–ê–¢–´', icon: '‚Ü©Ô∏è' },
    { value: 'bonus', label: '–ë–û–ù–£–°–´', icon: 'üéÅ' }
  ];

  const filteredTransactions = filter === 'all' 
    ? mockTransactions 
    : mockTransactions.filter(t => t.transaction_type === filter);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    total: mockTransactions.length,
    completed: mockTransactions.filter(t => t.status === 'completed').length,
    pending: mockTransactions.filter(t => t.status === 'pending').length,
    totalAmount: mockTransactions
      .filter(t => t.transaction_type === 'payment' && t.status === 'completed')
      .reduce((sum, t) => sum + t.amount, 0)
  };

  return (
    <div className="bg-gray-900 min-h-screen p-6">
      <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="bg-black border-4 border-orange-500 p-6 relative">
            <h1 className="text-3xl md:text-5xl font-black uppercase tracking-wider text-white text-center mb-4">
              <span className="text-orange-500">–ò–°–¢–û–†–ò–Ø</span> –ü–õ–ê–¢–ï–ñ–ï–ô
            </h1>
            <div className="w-full h-1 bg-orange-500"></div>
            
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
            <div className="absolute top-2 left-2 w-4 h-4 border-2 border-orange-500"></div>
            <div className="absolute bottom-2 right-2 w-4 h-4 bg-orange-500"></div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mb-8 bg-black border-4 border-white p-6">
          <h2 className="text-white font-black text-xl uppercase tracking-wider mb-6 text-center">
            üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-blue-900 border-2 border-blue-500 p-4 text-center">
              <div className="text-blue-400 font-black text-2xl mb-2">{stats.total}</div>
              <div className="text-white font-bold uppercase text-sm">–í–°–ï–ì–û –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</div>
            </div>
            <div className="bg-green-900 border-2 border-green-500 p-4 text-center">
              <div className="text-green-400 font-black text-2xl mb-2">{stats.completed}</div>
              <div className="text-white font-bold uppercase text-sm">–ó–ê–í–ï–†–®–ï–ù–û</div>
            </div>
            <div className="bg-yellow-900 border-2 border-yellow-500 p-4 text-center">
              <div className="text-yellow-400 font-black text-2xl mb-2">{stats.pending}</div>
              <div className="text-white font-bold uppercase text-sm">–í –û–ë–†–ê–ë–û–¢–ö–ï</div>
            </div>
            <div className="bg-orange-900 border-2 border-orange-500 p-4 text-center">
              <div className="text-orange-400 font-black text-2xl mb-2">{stats.totalAmount.toLocaleString()}‚Ç∏</div>
              <div className="text-white font-bold uppercase text-sm">–ü–û–¢–†–ê–ß–ï–ù–û</div>
            </div>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="mb-8">
          <div className="bg-black border-4 border-white p-6">
            <label className="block text-white font-black text-sm uppercase tracking-wider mb-4">
              <span className="text-orange-500">üîç</span> –§–ò–õ–¨–¢–† –ü–û –¢–ò–ü–£:
            </label>
            
            <div className="flex flex-wrap gap-4">
              {filterOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() => setFilter(option.value)}
                  className={`px-6 py-3 font-black text-sm uppercase tracking-wider border-4 transition-all duration-300 transform hover:scale-105
                    ${filter === option.value 
                      ? 'bg-orange-500 border-black text-black' 
                      : 'bg-black border-gray-600 text-white hover:border-orange-500'
                    }`}
                >
                  <span className="mr-2">{option.icon}</span>
                  {option.label}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        {filteredTransactions.length === 0 ? (
          <div className="bg-black border-4 border-gray-600 p-12 text-center">
            <div className="text-6xl mb-6">üí≥</div>
            <h3 className="text-white font-black text-2xl uppercase tracking-wider mb-4">
              –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´
            </h3>
            <p className="text-gray-400 font-bold uppercase">
              –ò–ó–ú–ï–ù–ò–¢–ï –§–ò–õ–¨–¢–† –ò–õ–ò –°–û–í–ï–†–®–ò–¢–ï –ü–ï–†–í–£–Æ –ü–û–ö–£–ü–ö–£
            </p>
          </div>
        ) : (
          <>
            {/* Desktop —Ç–∞–±–ª–∏—Ü–∞ */}
            <div className="hidden lg:block bg-black border-4 border-white overflow-hidden mb-8">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="bg-gray-900 border-b-4 border-orange-500">
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">ID</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–¢–ò–ü</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–°–£–ú–ú–ê</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–°–¢–ê–¢–£–°</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–û–ü–ò–°–ê–ù–ò–ï</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–î–ê–¢–ê</th>
                      <th className="px-6 py-4 text-left text-white font-black text-sm uppercase tracking-wider">–î–ï–ô–°–¢–í–ò–Ø</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredTransactions.map((transaction, index) => (
                      <tr key={transaction.transaction_id} className={`border-b-2 border-gray-700 hover:bg-gray-900 transition-colors duration-300 ${index % 2 === 0 ? 'bg-gray-800' : 'bg-black'}`}>
                        <td className="px-6 py-4">
                          <div className="text-orange-500 font-black">#{transaction.transaction_id}</div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="flex items-center gap-2">
                            <span className="text-lg">{getTransactionTypeIcon(transaction.transaction_type)}</span>
                            <span className="text-white font-bold text-sm uppercase">
                              {getTransactionTypeText(transaction.transaction_type)}
                            </span>
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          <div className={`font-black text-lg ${
                            transaction.transaction_type === 'refund' || transaction.transaction_type === 'bonus' 
                              ? 'text-green-500' 
                              : 'text-white'
                          }`}>
                            {transaction.transaction_type === 'refund' || transaction.transaction_type === 'bonus' ? '+' : ''}
                            {transaction.amount.toLocaleString()} {transaction.currency_code}
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          <span className={`font-black text-sm uppercase ${getStatusColor(transaction.status)}`}>
                            {getStatusText(transaction.status)}
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-gray-300 font-bold text-sm max-w-xs truncate">
                            {transaction.description || '-'}
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-gray-300 font-bold text-sm">
                            {new Date(transaction.created_date).toLocaleString('ru-RU')}
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          {transaction.transaction_type === 'payment' && 
                           transaction.status === 'completed' && (
                            <button
                              onClick={() => handleRefundRequest(transaction.transaction_id)}
                              disabled={requestRefund?.isLoading}
                              className="px-3 py-1 bg-yellow-600 hover:bg-yellow-500 text-white font-black text-xs uppercase tracking-wider
                                       border-2 border-black transition-all duration-300 transform hover:scale-105"
                            >
                              ‚Ü©Ô∏è –í–û–ó–í–†–ê–¢
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Mobile –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="lg:hidden space-y-4 mb-8">
              {filteredTransactions.map((transaction) => (
                <div key={transaction.transaction_id} className="bg-black border-4 border-white p-6 relative hover:border-orange-500 transition-colors duration-300">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getTransactionTypeIcon(transaction.transaction_type)}</span>
                      <div>
                        <div className="text-orange-500 font-black text-lg">#{transaction.transaction_id}</div>
                        <div className="text-white font-bold text-sm uppercase">
                          {getTransactionTypeText(transaction.transaction_type)}
                        </div>
                      </div>
                    </div>
                    <div className={`font-black text-lg ${getStatusColor(transaction.status)}`}>
                      {getStatusText(transaction.status)}
                    </div>
                  </div>

                  <div className="space-y-3">
                    <div className="bg-gray-900 border-2 border-gray-600 p-3">
                      <div className="text-gray-400 font-black text-xs uppercase mb-1">–°–£–ú–ú–ê:</div>
                      <div className={`font-black text-xl ${
                        transaction.transaction_type === 'refund' || transaction.transaction_type === 'bonus' 
                          ? 'text-green-500' 
                          : 'text-white'
                      }`}>
                        {transaction.transaction_type === 'refund' || transaction.transaction_type === 'bonus' ? '+' : ''}
                        {transaction.amount.toLocaleString()} {transaction.currency_code}
                      </div>
                    </div>

                    <div className="bg-gray-900 border-2 border-gray-600 p-3">
                      <div className="text-gray-400 font-black text-xs uppercase mb-1">–û–ü–ò–°–ê–ù–ò–ï:</div>
                      <div className="text-white font-bold text-sm">
                        {transaction.description || '-'}
                      </div>
                    </div>

                    <div className="bg-gray-900 border-2 border-gray-600 p-3">
                      <div className="text-gray-400 font-black text-xs uppercase mb-1">–î–ê–¢–ê:</div>
                      <div className="text-white font-bold text-sm">
                        {new Date(transaction.created_date).toLocaleString('ru-RU')}
                      </div>
                    </div>
                  </div>

                  {transaction.transaction_type === 'payment' && transaction.status === 'completed' && (
                    <div className="mt-4">
                      <button
                        onClick={() => handleRefundRequest(transaction.transaction_id)}
                        disabled={requestRefund?.isLoading}
                        className="w-full py-3 bg-yellow-600 hover:bg-yellow-500 text-white font-black text-sm uppercase tracking-wider
                                 border-2 border-black transition-all duration-300"
                      >
                        ‚Ü©Ô∏è –ó–ê–ü–†–û–°–ò–¢–¨ –í–û–ó–í–†–ê–¢
                      </button>
                    </div>
                  )}

                  <div className="absolute top-2 right-2 w-3 h-3 bg-orange-500 opacity-50"></div>
                </div>
              ))}
            </div>
          </>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö */}
        <div className="bg-black border-4 border-yellow-500 p-6">
          <div className="flex items-start gap-3">
            <span className="text-yellow-500 text-lg">üí°</span>
            <div className="text-gray-300 text-sm">
              <p className="font-bold uppercase mb-2 text-yellow-400">–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–û–ó–í–†–ê–¢–ê–•:</p>
              <ul className="space-y-1 text-xs normal-case">
                <li>‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</li>
                <li>‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —É—Å–ª—É–≥–æ–π</li>
                <li>‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</li>
                <li>‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: support@kolesa.kz</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TransactionHistoryPage;